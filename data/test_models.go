// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/calvarado2004/grid-service/data (interfaces: Repository)

// Package data is a generated GoMock package.
package data

import (
	sql "database/sql"
	reflect "reflect"

	models "github.com/calvarado2004/grid-service/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockRepository) Connect() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockRepositoryMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRepository)(nil).Connect))
}

// GetAllGeoCells mocks base method.
func (m *MockRepository) GetAllGeoCells() ([]models.GeoCell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGeoCells")
	ret0, _ := ret[0].([]models.GeoCell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGeoCells indicates an expected call of GetAllGeoCells.
func (mr *MockRepositoryMockRecorder) GetAllGeoCells() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGeoCells", reflect.TypeOf((*MockRepository)(nil).GetAllGeoCells))
}

// GetOneNearbyGeoCell mocks base method.
func (m *MockRepository) GetOneNearbyGeoCell(arg0, arg1, arg2 float64) (models.GeoCell, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneNearbyGeoCell", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.GeoCell)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneNearbyGeoCell indicates an expected call of GetOneNearbyGeoCell.
func (mr *MockRepositoryMockRecorder) GetOneNearbyGeoCell(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneNearbyGeoCell", reflect.TypeOf((*MockRepository)(nil).GetOneNearbyGeoCell), arg0, arg1, arg2)
}

// InsertGeoCell mocks base method.
func (m *MockRepository) InsertGeoCell(arg0 models.GeoCell) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGeoCell", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertGeoCell indicates an expected call of InsertGeoCell.
func (mr *MockRepositoryMockRecorder) InsertGeoCell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGeoCell", reflect.TypeOf((*MockRepository)(nil).InsertGeoCell), arg0)
}

// ObsoleteGeoCells mocks base method.
func (m *MockRepository) ObsoleteGeoCells() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObsoleteGeoCells")
	ret0, _ := ret[0].(error)
	return ret0
}

// ObsoleteGeoCells indicates an expected call of ObsoleteGeoCells.
func (mr *MockRepositoryMockRecorder) ObsoleteGeoCells() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObsoleteGeoCells", reflect.TypeOf((*MockRepository)(nil).ObsoleteGeoCells))
}

// UpdateWeather mocks base method.
func (m *MockRepository) UpdateWeather(arg0 models.WeatherAPIResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWeather", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWeather indicates an expected call of UpdateWeather.
func (mr *MockRepositoryMockRecorder) UpdateWeather(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWeather", reflect.TypeOf((*MockRepository)(nil).UpdateWeather), arg0)
}
